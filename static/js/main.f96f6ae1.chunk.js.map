{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","logo.svg","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormHooks.js","components/Contact/Contact.js","components/Contact/ContactHooks.js","components/ContactsList/ContacsList.js","components/ContactsList/ContactListHooks.js","components/Filter/Filter.js","components/Filter/FilterHooks.js","App.js","AppHooks.js","reportWebVitals.js","index.js","App.module.css","components/ContactsList/ContactsList.module.css"],"names":["module","exports","Component","ContactFormHooks","onFormSubmit","useState","name","setName","number","setNumber","handleChange","e","currentTarget","value","reset","console","log","onSubmit","preventDefault","className","s","nameTitle","inputStyleClass","type","onChange","placeholder","pattern","title","required","addBtm","Contact","onDelete","deleteBtn","onClick","ContactsListHooks","contactsArray","onDeleteContact","ContactsListStyle","map","id","item","FilterHooks","handleFilter","filterTitle","filterInputStyle","AppHooks","localStorage","setItem","JSON","stringify","db","parse","getItem","contacts","setContacts","filter","setFilter","visibleContacts","normalizedFilter","toLowerCase","contact","includes","getVisibleContact","container","titlePhonebook","data","newContact","shortid","generate","normalizedNewName","tmpArray","length","alert","isExist","contactsTitle","contactId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8IACAA,EAAOC,QAAU,CAAC,YAAc,4BAA4B,iBAAmB,mC,uCCA/ED,EAAOC,QAAU,CAAC,UAAY,+BAA+B,gBAAkB,qCAAqC,OAAS,8B,oaCD9G,I,kECIWC,Y,MCAX,SAASC,EAAT,GAA4C,IAAhBC,EAAe,EAAfA,aAEvC,EAAuBC,mBAAU,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA2BF,mBAAU,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAKIC,EAAe,SAACC,GACpB,MAAsBA,EAAEC,cAAjBN,EAAP,EAAOA,KAAMO,EAAb,EAAaA,MAEb,OAAQP,GACJ,IAAK,OACDC,EAAQM,GACV,MAEA,IAAK,SACHJ,EAAUI,GACZ,MAEA,QACE,SAsBJC,EAAQ,WACZC,QAAQC,IAAI,8DACZT,EAAQ,IACRE,EAAU,KAIV,OAEI,uBAAMQ,SA3Ba,SAACN,GACxBA,EAAEO,iBASFd,EANa,CACXE,KAAMA,EACNE,OAAQA,IAOVM,KAcI,UAEE,wBAAOK,UAAWC,IAAEC,UAApB,kBAEE,uBACAF,UAAWC,IAAEE,gBACXC,KAAK,OACLjB,KAAK,OACLO,MAAOP,EACPkB,SAAUd,EACVe,YAAY,gEACZC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,OAKZ,wBAAOT,UAAWC,IAAEC,UAApB,oBAEE,uBACIF,UAAWC,IAAEE,gBACbC,KAAK,MACLjB,KAAK,SACLO,MAAOL,EACPgB,SAAUd,EACVgB,QAAQ,yFACRC,MAAM,giBACNF,YAAY,uFACZG,UAAQ,OAId,wBAAQT,UAAWC,IAAES,OAASN,KAAK,SAAnC,8B,qCCrFYrB,YCCP,SAAS4B,EAAT,GAA6C,IAA1BxB,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,OAAQuB,EAAW,EAAXA,SAIxC,OACG,gCACK,kCAAI,qCAAQzB,EAAR,SAAJ,IAA4B,+BAAOE,OAEnC,wBAAQe,KAAK,SACbJ,UAAYC,IAAEY,UAEdC,QAAWF,EAHX,2BCPW7B,YC0CVgC,MA1CjB,YAAiE,IAAnCC,EAAkC,EAAlCA,cAAeC,EAAmB,EAAnBA,gBAEzC,EAAgC/B,mBAAS,IAAzC,mBAaA,OAbA,UAcI,oBAAIc,UAAYC,IAAEiB,kBAAlB,SAEGF,EAAcG,KAAI,gBAAEC,EAAF,EAAEA,GAAIjC,EAAN,EAAMA,KAAME,EAAZ,EAAYA,OAAZ,OACf,oBAAKW,UAAYC,IAAEoB,KAAnB,SAIM,cAAC,EAAD,CAAclC,KAAMA,EAAME,OAASA,EAAQuB,SAAY,kBAAIK,EAAgBG,OAJhDA,S,iBCrB1BrC,YCsBHuC,MAtBlB,YAA8C,IAAvB5B,EAAsB,EAAtBA,MAAO6B,EAAe,EAAfA,aAE1B,OACI,wBAAOvB,UAAaC,IAAEuB,YAAtB,mCAEQ,uBACAxB,UAAYC,IAAEwB,iBACZrB,KAAK,OACLjB,KAAK,SACLO,MAASA,EAEVW,SAAUkB,EACTjB,YAAY,+K,GCAZvB,Y,OCqGH2C,MAnGf,WAGEC,aAAaC,QAAQ,qBAAwBC,KAAKC,UAAL,YAAoBC,KAGnE,MAAiC7C,mBAAW2C,KAAKG,MAAML,aAAaM,QAAQ,wBAA5E,mBAAQC,EAAR,KAAkBC,EAAlB,KAEAvC,QAAQC,IAAM,aAAcqC,GAE1B,MAAyBhD,mBAAU,IAAnC,mBAAQC,EAAR,KACA,GADA,KAC6BD,mBAAU,KAAvC,mBAAQG,EAAR,KACA,GADA,KAC8BH,mBAAU,KAAxC,mBAASkD,EAAT,KAAiBC,EAAjB,KAwCIV,aAAaC,QAAQ,qBAAwBC,KAAKC,UAAWI,IAG7D,IAuBEI,EAnBwB,WAExB,IAAOC,EAAmBH,EAAOI,cAGjC,OAAON,EAASE,QAAO,SAAAK,GAAO,OAAIA,EAAQtD,KAAKqD,cAAcE,SAASH,MAcpDI,GAExB,OACE,sBAAK3C,UAAWC,IAAE2C,UAAlB,UAEG,oBAAI5C,UAAWC,IAAE4C,eAAjB,uBAEA,cAAC7D,EAAD,CAAkBG,KAAMA,EAAOE,OAAQA,EAAQJ,aApDxB,SAAC6D,GACvBlD,QAAQC,IAAI,qBACZD,QAAQC,IAAI,wFAA6BiD,GAEzC,IAAMC,EAAa,CACjB3B,GAAI4B,IAAQC,WACZ9D,KAAM2D,EAAK3D,KACXE,OAAQyD,EAAKzD,SAtBJ,SAACyD,GAGhB,IAAOI,EAAoBJ,EAAK3D,KAAKqD,cAC/BW,EAAWjB,EAASE,QAAO,SAAAK,GAAO,OAAIA,EAAQtD,KAAKqD,cAAcE,SAASQ,MAEhF,OAAsB,IAAlBC,EAASC,SACXC,MAAK,UAAKF,EAAS,GAAGhE,KAAjB,6BACG,IAgBGmE,CAAQR,IAKNX,EAAW,CAAGY,GAAH,mBAAkBb,QAwC1C,oBAAIlC,UAAWC,IAAEsD,cAAjB,sBAEI,cAAC,EAAD,CAAa7D,MAAS0C,EAAQb,aAlCb,SAAA/B,GACnB6C,EAAW7C,EAAEC,cAAcC,UAoCzB,cAAC,EAAD,CAAmBsB,cAAesB,EAAiBrB,gBAxBrC,SAACuC,GACrBrB,EAAcD,EAASE,QAAS,SAAAK,GAAO,OAAGA,EAAQrB,KAAOoC,MAGzD7B,aAAaC,QAAQ,qBAAwBC,KAAKC,UAAWI,WC9ElDuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCjBA5E,EAAOC,QAAU,CAAC,UAAY,uBAAuB,eAAiB,4BAA4B,cAAgB,6B,kBCAlHD,EAAOC,QAAU,CAAC,kBAAoB,wCAAwC,KAAO,2BAA2B,kBAAoB,wCAAwC,UAAY,mC","file":"static/js/main.f96f6ae1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterTitle\":\"Filter_filterTitle__2qTr1\",\"filterInputStyle\":\"Filter_filterInputStyle__2Mv4w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameTitle\":\"ContactForm_nameTitle__2VAbe\",\"inputStyleClass\":\"ContactForm_inputStyleClass__2r1eX\",\"addBtm\":\"ContactForm_addBtm__3rhXN\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  // Это единый обработчик для разных элементов. Выбираем нужный по атрибуту name (задать каждому элементу свой)\r\n  // и через вычисляемое (диннамическое) свойство объекта присваеваем нужному элементу нужное велью\r\n  handleChange = (e) => {\r\n    const {name} = e.currentTarget;\r\n\r\n        this.setState({ \r\n             [name]: e.currentTarget.value\r\n             });\r\n\r\n        // console.log(\"Сработало изменение инпута Form.js)\", e);\r\n        // console.log(\"e.currentTarget.value: \", e.currentTarget.value);\r\n        // console.log(\"e.currentTarget.name: \", e.currentTarget.name);\r\n\r\n  };\r\n\r\n\r\n\r\n  handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    console.log(\"Сработал сабмит формы при клике на кнопку эдд\");\r\n    console.log(\"this.state : \", this.state);\r\n\r\n    // Записываем  переменные имени и телефона, напечатанные в форме, в объект\r\n    const data = {\r\n      name: this.state.name,\r\n      number: this.state.number,\r\n    }\r\n\r\n    // Передаём объект с новыми данными из формы как пареметр функции - для передачи в Арр (поднятие состояния)\r\n    this.props.onFormSubmit(data);\r\n\r\n    // Очищаем поля формы\r\n    this.reset();\r\n  };\r\n\r\n  // Метод очистки полей Формы\r\n  reset = () => {\r\n    console.log(\"Сработал    reset \");\r\n    this.setState ( {\r\n       name: \"\",\r\n      number: \"\" },\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      // <form onSubmit={this.props.onFormSubmit}>\r\n      <form onSubmit={this.handleFormSubmit}>\r\n      \r\n        <label className={s.nameTitle}>\r\n          Name:\r\n          <input\r\n          className={s.inputStyleClass }\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"Введите имя\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n      \r\n\r\n        <label className={s.nameTitle}>\r\n          Number:\r\n          <input\r\n              className={s.inputStyleClass }\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              placeholder=\"Введите номер: 000-00-00\"\r\n              required\r\n          />\r\n                </label> \r\n\r\n        <button className={s.addBtm}  type=\"submit\"> Add contact </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n\r\nContactForm.propTypes = {\r\n \r\n  state: PropTypes.arrayOf(\r\n    // Объект с определённой структурой\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\n\r\nexport default ContactForm;\r\n","import React, { useState} from \"react\";\r\nimport s from \"./ContactForm.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function ContactFormHooks ({onFormSubmit}) {\r\n\r\n    const [name, setName] =useState ('');\r\n    const [number, setNumber] =useState ('');\r\n\r\n\r\n     // Это единый обработчик для разных элементов. Выбираем нужный по атрибуту name (задать каждому элементу свой)\r\n  // и через вычисляемое (диннамическое) свойство объекта присваеваем нужному элементу нужное велью\r\n  const handleChange = (e) => {\r\n    const {name, value} = e.currentTarget;\r\n\r\n    switch (name) {\r\n        case \"name\":\r\n            setName(value);\r\n          break;\r\n\r\n          case \"number\":\r\n            setNumber(value);\r\n          break;\r\n\r\n          default:\r\n            return;\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n   \r\n    // Записываем  переменные имени и телефона, напечатанные в форме, в объект\r\n    const data = {\r\n      name: name,\r\n      number: number,\r\n    }\r\n\r\n    // Передаём объект с новыми данными из формы как пареметр функции - для передачи в Арр (поднятие состояния)\r\n    onFormSubmit(data);\r\n\r\n    // Очищаем поля формы\r\n    reset();\r\n  };\r\n\r\n\r\n  // Метод очистки полей Формы\r\n  const reset = () => {\r\n    console.log(\"Сработал    reset \");\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n\r\n    return (\r\n        \r\n        <form onSubmit={handleFormSubmit}>\r\n        \r\n          <label className={s.nameTitle}>\r\n            Name:\r\n            <input\r\n            className={s.inputStyleClass }\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={handleChange}\r\n              placeholder=\"Введите имя\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n            />\r\n          </label>\r\n        \r\n  \r\n          <label className={s.nameTitle}>\r\n            Number:\r\n            <input\r\n                className={s.inputStyleClass }\r\n                type=\"tel\"\r\n                name=\"number\"\r\n                value={number}\r\n                onChange={handleChange}\r\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n                title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n                placeholder=\"Введите номер: 000-00-00\"\r\n                required\r\n            />\r\n                  </label> \r\n  \r\n          <button className={s.addBtm}  type=\"submit\"> Add contact </button>\r\n        </form>\r\n      );\r\n}","import s from \"./Contact.module.css\";\r\nimport React, { Component } from \"react\";\r\n\r\n// Прокидывание пропсов по цепочке до \"внука\": 1:10:00 Репета. Занятие 5. Жизненный цикл \r\nclass Contact extends Component { \r\n\r\n    render () {\r\n        const {name, number, onDelete} = this.props;\r\n        return ( \r\n           <div>\r\n                <p> <span> {name} : </span> <span>{number}</span></p >\r\n\r\n                <button type=\"button\"\r\n                className ={s.deleteBtn}\r\n                // onClick ={ () => onDeleteContact(id) }\r\n                onClick ={ onDelete } >   Delete </button>\r\n            </div>  \r\n        )\r\n    }\r\n}\r\n\r\nexport default Contact;","import s from \"./Contact.module.css\";\r\nimport React, { Component } from \"react\";\r\n\r\n\r\n// Прокидывание пропсов по цепочке до \"внука\": 1:10:00 Репета. Занятие 5. Жизненный цикл \r\nexport default function Contact ({name, number, onDelete}) { \r\n\r\n   \r\n        // const {name, number, onDelete} = this.props;\r\n        return ( \r\n           <div>\r\n                <p> <span> {name} : </span> <span>{number}</span></p >\r\n\r\n                <button type=\"button\"\r\n                className ={s.deleteBtn}\r\n                // onClick ={ () => onDeleteContact(id) }\r\n                onClick ={ onDelete } >   Delete </button>\r\n            </div>  \r\n        )\r\n    \r\n}\r\n","import React, { Component } from \"react\";\r\nimport s from \"./ContactsList.module.css\";\r\nimport PropTypes from 'prop-types';\r\nimport Contact from '../Contact'\r\nimport ContactHooks from '../Contact/ContactHooks'\r\n\r\nclass ContactsList extends Component {\r\n\r\n  state = {\r\n    \r\n    contacts: [ ],\r\n  };\r\n\r\n  deleteContact = (contactId) => {\r\n    this.setState ( prevState => ({\r\n      contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n    }) )\r\n  }\r\n\r\n\r\n  render() {\r\n    const { contacts, onDeleteContact } = this.props;\r\n\r\n    return (\r\n      <ul className= {s.ContactsListStyle}>\r\n        {/* <span className= {s.contactsListTitle}>Contacts</span> */}\r\n        {contacts.map(({id, name, number}) => (\r\n            <li  className= {s.item}  key = {id}>\r\n\r\n              {/* ВНИМАНИЕ!  Важный синтаксис во время прокидывания пропов по цепочке: onDelete = {()=>onDeleteContact(id)} */}\r\n                  {/* <Contact name={name} number ={number} onDelete = {()=>onDeleteContact(id)} /> */}\r\n                  <ContactHooks name={name} number ={number} onDelete = {()=>onDeleteContact(id)} />\r\n            </li>\r\n          ))}\r\n      </ul>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nContactsList.propTypes = {\r\n \r\n  state: PropTypes.arrayOf(\r\n    // Объект с определённой структурой\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ), \r\n};\r\n\r\nexport default ContactsList;\r\n\r\n","import React, { useState } from \"react\";\r\nimport s from \"./ContactsList.module.css\";\r\nimport PropTypes from 'prop-types';\r\n// import Contact from '../Contact'\r\nimport ContactHooks from '../Contact/ContactHooks'\r\n\r\nfunction ContactsListHooks ({ contactsArray, onDeleteContact }) {\r\n\r\n    const [contacts, setContacts] = useState([]);\r\n\r\n    const deleteContact = (contactId) => {\r\n\r\n        setContacts  ( prevState => ({\r\n            contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n          }) )\r\n\r\n        // this.setState ( prevState => ({\r\n        //   contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n        // }) )\r\n      }\r\n\r\n    return (\r\n        <ul className= {s.ContactsListStyle}>\r\n          {/* <span className= {s.contactsListTitle}>Contacts</span> */}\r\n          {contactsArray.map(({id, name, number}) => (\r\n              <li  className= {s.item}  key = {id}>\r\n  \r\n                {/* ВНИМАНИЕ!  Важный синтаксис во время прокидывания пропов по цепочке: onDelete = {()=>onDeleteContact(id)} */}\r\n                    {/* <Contact name={name} number ={number} onDelete = {()=>onDeleteContact(id)} /> */}\r\n                    <ContactHooks name={name} number ={number} onDelete = {()=>onDeleteContact(id)} />\r\n              </li>\r\n            ))}\r\n        </ul>\r\n  \r\n      );\r\n}\r\n\r\nContactsListHooks.propTypes = {\r\n \r\n    state: PropTypes.arrayOf(\r\n      // Объект с определённой структурой\r\n      PropTypes.shape({\r\n        name: PropTypes.string.isRequired,\r\n        number: PropTypes.string.isRequired,\r\n      }),\r\n    ), \r\n  };\r\n\r\n  export default ContactsListHooks;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./Filter.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Filter extends Component {\r\n\r\n    render() {\r\n        // const {value, handleFilter} = this.props;\r\n\r\n        return (\r\n            <label className = {s.filterTitle}>\r\n                  Find contacts by name:\r\n                    <input\r\n                    className ={s.filterInputStyle}\r\n                      type=\"text\"\r\n                      name=\"filter\"\r\n                      value = {this.props.value} \r\n                      \r\n                     onChange={this.props.handleFilter} \r\n                      placeholder=\"Введите имя для поиска контакта\"\r\n                  />\r\n                </label> \r\n        )\r\n    }\r\n}\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n }\r\n\r\nexport default Filter;","import React, { useState } from \"react\";\r\nimport s from \"./Filter.module.css\";\r\nimport PropTypes from 'prop-types';\r\n\r\nfunction FilterHooks ({value, handleFilter}) {\r\n\r\n    return (\r\n        <label className = {s.filterTitle}>\r\n              Find contacts by name:\r\n                <input\r\n                className ={s.filterInputStyle}\r\n                  type=\"text\"\r\n                  name=\"filter\"\r\n                  value = {value} \r\n                  \r\n                 onChange={handleFilter} \r\n                  placeholder=\"Введите имя для поиска контакта\"\r\n              />\r\n            </label> \r\n    )\r\n}\r\n\r\nFilterHooks.propTypes = {\r\n    value: PropTypes.string,\r\n   }\r\n\r\n   export default FilterHooks;","import logo from \"./logo.svg\";\r\nimport s from \"./App.module.css\";\r\nimport React, { Component } from \"react\";\r\n\r\nimport shortid from 'shortid'\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactFormHooks from './components/ContactForm/ContactFormHooks';\r\n\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport ContactsListHooks from './components/ContactsList/ContactListHooks'\r\n\r\nimport Filter from \"./components/Filter\";\r\nimport FilterHooks from \"./components/Filter/FilterHooks\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    // contacts: [\"Adrian\", \"Jacob Mercer\", \"Charles de Batz\"],\r\n    contacts: [\r\n      {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\r\n      {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\r\n      {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\r\n      {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'},\r\n    ],\r\n    name: \"\",\r\n    filter: \"\",\r\n  };\r\n\r\n  formSubmitHandler = (data) => {\r\n    console.log(\"formSubmitHandler\");\r\n    console.log(\"Новый контакт ( data ) : \", data);\r\n \r\n    const newContact = {\r\n      id: shortid.generate(),\r\n      name: data.name,\r\n      number: data.number\r\n    }\r\n\r\n\r\n    if ( this.isExist(data) ) {\r\n      // если функция isExist возврвтит true, то такой контакт уже есть и мы сразу выходим, ничего не добавляем в список\r\n      return;\r\n        } else {\r\n                // Обновляем прежнее состояние массива через распыление\r\n                this.setState((prevState) => {\r\n                    return {\r\n                      contacts: [newContact, ...prevState.contacts ],\r\n                        };\r\n                  });\r\n              }         \r\n    \r\n  };\r\n\r\n  changeFilter = e => {\r\n    this.setState ({ filter: e.currentTarget.value })\r\n  }\r\n\r\n\r\n  getVisibleContact = () => {\r\n    const {filter, contacts } =  this.state;\r\n    //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n    const  normalizedFilter = filter.toLowerCase ();\r\n\r\n    //Используем метод Array.filter() c MDN. Проверяем есть ли значение из фильтра в массиве контактов (ищем по значению имени)\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n  }\r\n\r\n\r\n  // Функция о выводе предупреждения, если пользователь хочет добавить контакты, имена которых уже есть в телефонной книге.\r\n  //Её вызов делаем внутри функции сабмита формы formSubmitHandler\r\n  isExist  = (data) => {\r\n    //из нового полученного объекта с новым контактом берём name переводим в нижний регистр и ищем такие же имена в существующем списке контактов\r\n    const { contacts } =  this.state;\r\n    const  normalizedNewName = data.name.toLowerCase ();\r\n    const tmpArray = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedNewName));\r\n\r\n    if (tmpArray.length!==0) {\r\n      alert (`${tmpArray[0].name} is already in contacts`)\r\n       return true;\r\n      } else {\r\n        return false;\r\n       }\r\n\r\n  }\r\n\r\n  deleteContact = (contactId) => {\r\n    this.setState ( prevState => ({\r\n      contacts: prevState.contacts.filter ( contact=> contact.id !== contactId)\r\n    }) )\r\n  }\r\n  \r\n\r\n  render() {\r\n\r\n    //Создание фильтра\r\n  //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n// const  normalizedFilter = this.state.filter.toLowerCase ();\r\n// const visibleContacts = this.state.contacts.filter(contact =>\r\n//    contact.name.toLowerCase().includes(normalizedFilter));\r\n\r\nconst visibleContacts = this.getVisibleContact();\r\n\r\n\r\n// console.log (\"Рендерим из  App текущий список контактов : \", this.state.contacts)\r\n\r\n    const { contacts } = this.state;\r\n    return (\r\n      <div className={s.container}>\r\n         \r\n         <h1 className={s.titlePhonebook}>Phonebook</h1>\r\n         {/* <ContactForm name={this.state.name}  number={this.state.number} onFormSubmit={this.formSubmitHandler} /> */}\r\n         <ContactFormHooks name={this.state.name}  number={this.state.number} onFormSubmit={this.formSubmitHandler} />\r\n\r\n        <h2 className={s.contactsTitle}>Contacts</h2>\r\n\r\n          {/* Это фильтр. Его значение мы не будем хранить в state стейте данной формы. Значение живого фильтра будет хранится в стейте App */}\r\n          {/* <Filter value = {this.state.filter} handleFilter = {this.changeFilter}/> */}\r\n          <FilterHooks value = {this.state.filter} handleFilter = {this.changeFilter}/>\r\n\r\n\r\n          {/* <ContactsList contacts={visibleContacts} onDeleteContact = {this.deleteContact}/> */}\r\n          <ContactsListHooks contactsArray={visibleContacts} onDeleteContact = {this.deleteContact}/>          \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","\r\nimport s from \"./App.module.css\";\r\nimport React, {useState } from \"react\";\r\n\r\nimport shortid from 'shortid'\r\n\r\nimport ContactForm from \"./components/ContactForm\";\r\nimport ContactFormHooks from './components/ContactForm/ContactFormHooks';\r\n\r\nimport ContactsList from \"./components/ContactsList\";\r\nimport ContactsListHooks from './components/ContactsList/ContactListHooks'\r\n\r\nimport Filter from \"./components/Filter\";\r\nimport FilterHooks from \"./components/Filter/FilterHooks\";\r\n\r\nimport db from './db.json'\r\n\r\n\r\nfunction AppHooks () {\r\n\r\n// Записываем стартовые значения контактов в СТЕЙТ нашего компонента\r\n  localStorage.setItem('contactsLocalSt_db',   JSON.stringify( [...db] ) );\r\n\r\n\r\nconst [ contacts, setContacts] = useState ( JSON.parse(localStorage.getItem('contactsLocalSt_db')) );\r\n\r\nconsole.log ( 'contacts =', contacts );\r\n\r\n  const [ name, setName] = useState ('');\r\n  const [ number, setNumber] = useState ('');\r\n  const [  filter, setFilter] = useState ('');\r\n  \r\n\r\n\r\n  // Функция о выводе предупреждения, если пользователь хочет добавить контакты, имена которых уже есть в телефонной книге.\r\n  //Её вызов делаем внутри функции сабмита формы formSubmitHandler\r\n  const isExist  = (data) => {\r\n    //из нового полученного объекта с новым контактом берём name переводим в нижний регистр и ищем такие же имена в существующем списке контактов\r\n    \r\n    const  normalizedNewName = data.name.toLowerCase ();\r\n    const tmpArray = contacts.filter(contact => contact.name.toLowerCase().includes(normalizedNewName));\r\n\r\n    if (tmpArray.length!==0) {\r\n      alert (`${tmpArray[0].name} is already in contacts`)\r\n       return true;\r\n      } else {\r\n        return false;\r\n       }\r\n  }\r\n\r\n\r\n    const formSubmitHandler = (data) => {\r\n        console.log(\"formSubmitHandler\");\r\n        console.log(\"Новый контакт ( data ) : \", data);\r\n    \r\n        const newContact = {\r\n          id: shortid.generate(),\r\n          name: data.name,\r\n          number: data.number\r\n        }\r\n            if ( isExist(data) ) {\r\n            // если функция isExist возврвтит true, то такой контакт уже есть и мы сразу выходим, ничего не добавляем в список\r\n             return;\r\n                } else {\r\n                  // Обновляем прежнее состояние массива через распыление\r\n                   setContacts ([newContact, ...contacts ])\r\n               }         \r\n      };\r\n\r\n      // Записываем новый массив контактов в localStorage\r\n      localStorage.setItem('contactsLocalSt_db',   JSON.stringify( contacts)  );\r\n    \r\n    \r\n      const changeFilter = e => {\r\n        setFilter (e.currentTarget.value )\r\n      }\r\n\r\n      const getVisibleContact = () => {\r\n        //Приводим значение фильтра к нижнему регистру (и в функции проверки имена тоже будем приводить к нижнему регистру)\r\n        const  normalizedFilter = filter.toLowerCase ();\r\n    \r\n        //Используем метод Array.filter() c MDN. Проверяем есть ли значение из фильтра в массиве контактов (ищем по значению имени)\r\n        return contacts.filter(contact => contact.name.toLowerCase().includes(normalizedFilter));\r\n      }\r\n\r\n\r\n  const deleteContact = (contactId) => {\r\n    setContacts ( contacts.filter ( contact=> contact.id !== contactId))\r\n    \r\n    // Записываем в localStorage обновлённый массив после удаления одного контакта\r\n    localStorage.setItem('contactsLocalSt_db',   JSON.stringify( contacts)  );\r\n\r\n  }\r\n\r\n\r\n\r\n  const visibleContacts = getVisibleContact();\r\n\r\n  return (\r\n    <div className={s.container}>\r\n       \r\n       <h1 className={s.titlePhonebook}>Phonebook</h1>\r\n      \r\n       <ContactFormHooks name={name}  number={number} onFormSubmit={formSubmitHandler} />\r\n\r\n      <h2 className={s.contactsTitle}>Contacts</h2>\r\n\r\n          <FilterHooks value = {filter} handleFilter = {changeFilter}/>\r\n\r\n\r\n          <ContactsListHooks contactsArray={visibleContacts} onDeleteContact = {deleteContact}/>          \r\n\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nexport default AppHooks;","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport AppHooks from './AppHooks'\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <App /> */}\r\n    <AppHooks/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__mk614\",\"titlePhonebook\":\"App_titlePhonebook__1NDSO\",\"contactsTitle\":\"App_contactsTitle__3NuCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactsListTitle\":\"ContactsList_contactsListTitle__1amWw\",\"item\":\"ContactsList_item__2PPeV\",\"ContactsListStyle\":\"ContactsList_ContactsListStyle__iWl_K\",\"deleteBtn\":\"ContactsList_deleteBtn__1qlK0\"};"],"sourceRoot":""}